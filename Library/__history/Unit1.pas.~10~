unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Data.DB, Vcl.Grids,
  Vcl.DBGrids, ABSMain;
 function GetAppVersionStr : string; forward;
type
  TForm1 = class(TForm)
    Edit1: TEdit;
    Edit2: TEdit;
    Edit3: TEdit;
    Edit4: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    Button5: TButton;
    DBGrid1: TDBGrid;
    ABSTable1: TABSTable;
    ABSQuery1: TABSQuery;
    ABSDatabase1: TABSDatabase;
    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  versione:string;
implementation

{$R *.dfm}

procedure TForm1.Button1Click(Sender: TObject);
begin
   if (Edit1.Text='')OR (Edit2.Text='') or (Edit3.Text='') or (Edit4.Text='') then
     begin
     ShowMessage('Please fill in Data to be stored ');
     Exit;
     end else
      begin
       ABSTable1.Append;
            ABSTable1.FieldByName('Title').AsString:=Edit1.Text;
            ABSTable1.FieldByName('Author').AsString:=Edit2.Text;
            ABSTable1.FieldByName('Row').AsString:=Edit3.Text;
            ABSTable1.FieldByName('Column').AsString:=Edit4.Text;
       ABSTable1.Post;
          Edit1.Text:='';
          Edit2.Text:='';
          Edit3.Text:='';
          Edit4.Text:='';
         ShowMessage('Uploaded');
         Exit;
       end;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
     ABSMain.StartDisconnected:=True;      //consigliato da Absolute Database support
     ABSDatabase1.DatabaseFilename:= ExtractFilePath(Application.ExeName)+'MyLibrary.ABS';
     ABSDatabase1.Open;
         // showmessage(ABSDatabase1.Databasefilename);
     ABSTable1.TableName:='Cat';
     ABSTable1.Open;
     ABSTable1.Last;
     GetAppVersionStr;
     Form1.Caption:=Form1.Caption +': Library Catalogue, ver. ' + Versione;
  end;

   function GetAppVersionStr: string;
var
Exe: string;
Size, Handle: DWORD;
Buffer: TBytes;
FixedPtr: PVSFixedFileInfo;
begin
Exe := ParamStr(0);
Size := GetFileVersionInfoSize(PChar(Exe), Handle);
if Size = 0 then
RaiseLastOSError;
SetLength(Buffer, Size);
if not GetFileVersionInfo(PChar(Exe), Handle, Size, Buffer) then
RaiseLastOSError;
if not VerQueryValue(Buffer, '\', Pointer(FixedPtr), Size) then
RaiseLastOSError;
Result := Format('%d.%d.%d.%d',
[LongRec(FixedPtr.dwFileVersionMS).Hi, //major
LongRec(FixedPtr.dwFileVersionMS).Lo, //minor
LongRec(FixedPtr.dwFileVersionLS).Hi, //release
LongRec(FixedPtr.dwFileVersionLS).Lo]); //build
versione:= Result;
end;
end.
