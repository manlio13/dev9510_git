unit Unit1;   //14/07/24

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls,Data.DB, Vcl.Grids,
  Vcl.DBGrids, ABSMain, Vcl.ExtCtrls, Vcl.DBCtrls, frxClass, frxDBSet,
  frxExportBaseDialog,frxExportPDF,System.UITypes,Vcl.Buttons;

 function GetAppVersionStr : string; forward;
type
  TForm1 = class(TForm)
    Edit1: TEdit;
    Edit2: TEdit;
    Edit3: TEdit;
    Edit4: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Button1: TButton;
    Label4: TLabel;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    DBGrid1: TDBGrid;
    ABSTable1: TABSTable;
    ABSQuery1: TABSQuery;
    ABSDatabase1: TABSDatabase;
    DBNavigator1: TDBNavigator;
    DataSource1: TDataSource;
    Button6: TButton;
    frxReport1: TfrxReport;
    frxDBDataset1: TfrxDBDataset;
    frxPDFExport1: TfrxPDFExport;
    Button7: TButton;
    Location: TLabel;
    Button8: TButton;
    Button5: TButton;
    CheckBox1: TCheckBox;
    Edit5: TEdit;
    Label5: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure Button7Click(Sender: TObject);
    procedure Button8Click(Sender: TObject);
    procedure CheckBox1Click(Sender: TObject);
    procedure DBGrid1CellClick(Column: TColumn);
    procedure DBNavigator1Click(Sender: TObject; Button: TNavigateBtn);
    private
    { Private declarations }
    public
    { Public declarations }
  end;

  var
  Form1: TForm1;               //per inserire un chm serve caricare la unit
  versione:string;             //Vcl.HtmlHelViewer ed inserire
  dato,k:Integer;                //Application.HelpFile := '.\library.chm'; in .dpr
  N:array[1..100] of Integer;   //e settare in Form1 HelpContext ed HelpFile
  trova,scelto,shelf:Boolean;


implementation
uses
Unit2,Vcl.HtmlHelpViewer;
{$R *.dfm}

procedure TForm1.FormCreate(Sender: TObject);        //form

  begin
     ABSTable1.Active:=True;
     ABSDatabase1.DatabaseFilename:= ExtractFilePath(Application.ExeName)+'MyLibrary.ABS';
     ABSDatabase1.Connected:=True;
     ABSDatabase1.Open;
     ABSTable1.TableName:='Cat';
     ABSTable1.Open;
     ABSTable1.Last;
     GetAppVersionStr;
     Form1.Caption:=Form1.Caption +': Library Catalogue, ver. ' + Versione;
     trova:=False;
     scelto:=False;
     shelf:=False;
     //Form1.FormStyle := fsStayOnTop;
  end;

procedure TForm1.Button1Click(Sender: TObject);  //ADD
Begin
   if (Edit1.Text='')OR (Edit2.Text='') or (Edit3.Text='') or (Edit4.Text='')or (Edit5.text='')then
     begin
     ShowMessage('Please fill in Data to be stored'+#13+ ' or Data still missing !');
     Exit;
     end else
      with ABSQuery1 do
      begin
         DataSource1.DataSet:=ABSQuery1;
         Edit1.text:=LowerCase(Edit1.Text);
         Close;
         SQL.Text:='select * from Cat where lower(Title) like '+
          quotedstr('%'+Edit1.text+'%');
         ExecSQL;
         open;
         if ABSQuery1.recordCount >0 then
         if MessageDlg('A similar book already exists.'+#13+
         ' Do you want to quit? ',mtConfirmation, mbYesNo,0)=mrYes then
         Exit;
       end;

      begin                               //registra il libro
           ABSTable1.ReadOnly:=False;
           if (Edit1.Text='')OR (Edit2.Text='') or (Edit3.Text='') or (Edit4.Text='')or (Edit5.text='')then
           begin
             ShowMessage('Data still missing ! ');
             Exit;
           end else
           ABSTable1.Append;
            ABSTable1.FieldByName('Title').AsString:=Edit1.Text;
            ABSTable1.FieldByName('Author').AsString:=Edit2.Text;
            ABSTable1.FieldByName('Row').AsString:=Edit4.Text;
            ABSTable1.FieldByName('Col').AsString:=Edit3.Text;
            ABSTable1.FieldByName('Location').AsString:=Edit5.Text;
           ABSTable1.Post;
          Edit1.Text:='';
          Edit2.Text:='';

          if CheckBox1.checked=False then
          begin
           Edit3.Text:='';
           Edit4.Text:='';
           Edit5.text:='';
          end;
         ShowMessage('Uploaded');
         Exit;
       end;
end;

procedure TForm1.Button2Click(Sender: TObject);        //find
    var
    i,t,m:Integer;
    label
    punto;
 begin
     ABSTable1.Filtered:=False;
     ABSTable1.first;
     DataSource1.DataSet:=ABSQuery1;
     t:=0;
    if (ABSTable1.isEmpty) or (((Edit1.text='') and (Edit2.text=''))and((edit3.text='')and (edit4.text='')))then
    begin
       ShowMessage('There is nothing to find');
       Exit;
    end else

   begin
     if Edit5.text ='all' then Edit5.text:='All';  // è indifferente la posizione dell'istruzione

     if (edit5.text='') then    //non c'è la posizione
       begin
        showMessage('A location must be entered or enter "All".');
            with ABSQuery1 do
         begin
           DataSource1.DataSet:=ABSQuery1;
           Close;
           SQL.Text:='select distinct location from Cat';
           ExecSQL;
           Open;
         end;
          showmessagePos('Insert the appropriate one in "location" by copying one from the list.',200,200);
          //Button3.Click;
         Exit;
       end else
        //cè la posizione
       if Edit5.text<>'All' then
     begin
          with ABSQuery1 do
       begin
         DataSource1.DataSet:=ABSQuery1;
          Close;
         SQL.Text:='select count(location) from Cat where location ='+ quotedstr(Edit5.text);
          ExecSQL;
          Open;
         m:= ABSQuery1.Fields[0].AsInteger;
         if m=0 then
          begin
              ShowMessage('no that location') ;
              exit;
          end;
          
         end;
      end;

    begin
       trova:=True;
     DataSource1.DataSet:=ABSQuery1;
    if ((Edit1.Text='') AND (Edit2.Text='') and (Edit3.Text='') and (Edit4.Text='')) then
     begin   // c'è la posizione ma null'altro
     ShowMessage('The search for books can be done by Author or by Title'+#13+
     'or by Shelf indicating both the column and the row'+#13+'    Please fill data');
      Exit;
     end ;
       if Edit1.text<>'' then  t:=t+1;                        //per verificare che ci siano i soli dati necessari
       if Edit2.text<>'' then  t:=t+1;
       if (Edit3.text<>'')AND (Edit4.text<>'') then  t:=t+1;
       if (Edit3.text<>'')XOR (Edit4.text<>'') then  t:=2;
       if t>2 then
        begin
        Showmessage('Attention: wrong selection entry or to many parametrs.');
        Button3Click(Self);
        Exit;
       end ;
        showMessage('Attention: with more then one data the result cannot be unique');
         if ((Edit1.Text<>'') AND (Edit2.Text='')) then   //selezione per titolo
       with ABSQuery1 do     //attenzione alle spaziature corrette tra testi e variabili dove (')
       begin
         Edit1.text:=LowerCase(Edit1.Text);
           if edit5.text='All' then         //senza dato di locazione
             begin
               Close ;
                SQL.Text:= 'select * from Cat where lower(Title) like ' + quotedstr('%'+ Edit1.text +'%') ;
               ExecSQL;
               Open;
               DBNavigator1. Enabled;
               goto punto;
             end;
         Close;
         SQL.Text:= 'select * from Cat where lower(Title) like ' + quotedstr('%'+ Edit1.text +'%') +
         'AND lower(Location) like ' + quotedstr('%'+Edit5.text+'%');
         ExecSQL;
         Open;
       end;

          if ((Edit1.Text='') AND (Edit2.Text<>'')) then  //selezione  per autore
         with ABSQuery1 do
         begin
            Edit2.text:=LowerCase(Edit2.Text);
            if edit5.text='All' then              //senza dato di locazione
             begin
               Close ;
               SQL.Text:='select * from Cat where lower(Author) like ' + quotedstr('%'+Edit2.text+'%');
               ExecSQL;
               Open;
               goto punto;
             end;
            Close;
          SQL.Text:='select * from Cat where lower(Author) like ' + quotedstr('%'+Edit2.text+'%')+
          'AND lower(Location) like ' +quotedstr('%'+Edit5.text+'%');
           ExecSQL;
           Open;
         end;

            if ((Edit1.Text<>'') AND (Edit2.Text<>'')) then   //selezione per titolo e autore
       with ABSQuery1 do     //attenzione alle spaziature corrette tra testi e variabili dove (')
       begin
          Edit1.text:=LowerCase(Edit1.Text);
          Edit2.text:=LowerCase(Edit2.Text);
           if edit5.text='All' then         //senza dato di locazione
             begin
               Close ;
                SQL.Text:='select * from Cat where lower(Title) like ' + quotedstr('%'+ Edit1.text +'%')+
                ' AND lower(Author) like ' + quotedstr('%'+Edit2.text+'%');
               ExecSQL;
               Open;
               //DBNavigator1. Enabled;
               goto punto;
             end;
         Close;
         SQL.Text:= 'select * from Cat where lower(Title) like ' + quotedstr('%'+ Edit1.text +'%') +
         ' AND lower(Author) like ' + quotedstr('%'+Edit2.text+'%')+
         'AND lower(Location) like ' + quotedstr('%'+Edit5.text+'%');
         ExecSQL;
         Open;
       end;

               if ((Edit3.Text<>'') AND (Edit4.Text<>'')) then   //selezione per dolonna e riga
       begin
          shelf:=True;
          with ABSQuery1 do
         begin
           if edit5.text='All' then         //senza dato di locazione
             begin
               ShowMessage('Attention: with generic location result may be)
               Close ;
               SQL.Text:='SELECT * From Cat where Col= '+edit3.text+' AND Row = '+Edit4.text;
               ExecSQL;
               Open;
               DBNavigator1. Enabled;
               goto punto;
             end;



          Close;     //notare il formato della notazione del query. Att.ai nomi riservati SQL
          SQL.Text:='SELECT * From Cat where Col= '+edit3.text+' AND Row = '+Edit4.text +
            ' AND lower(Location) like ' + quotedstr('%'+Edit5.text+'%');
          ExecSQL;
           Open;
          end;
         //ABSTable1.first;
       end;

      punto:
             //qui inizia l'utilizzo del risultato del query
       dato:=ABSQuery1.RecordCount;
     if dato>0 then
     with ABSQuery1  do
       begin

        ABSQuery1.First;   //costruisce una lista nell'array N dei Num trovati in ABSQuery
        while not EOF do
           begin
             for i:=1 to dato do   //indice deve inziare da 1 NON =0
             begin        //senza begin-end esegue tutto il ciclo
              N[i]:= FieldByName('Num').AsInteger;
                // ShowMessage(IntToStr(N[i]));
              ABSQuery1.Next;
              end;
          end;
          trova:=True;
       end else
     begin
       ShowMessage('Cannot find any record. Please check your entry.');

       Exit;
     end;

     end;
    End;
   End;

  procedure TForm1.Button3Click(Sender: TObject);      //clear
 begin
    Edit1.Text:='';
    Edit2.Text:='';
    Edit3.Text:='';
    Edit4.Text:='';
    Edit5.text:='';
     DataSource1.DataSet:=ABSQuery1;
      with ABSQuery1 do
       begin
         Close;
         SQL.Text:='select * from Cat where Num=0'; //per cancellare la DBGrid perchè Num=0 è vuoto
         ExecSQL;
         Open;
        end;
      Form2.visible:=False;
   end;

procedure TForm1.Button4Click(Sender: TObject);   //List
 
begin
     ABSDatabase1.Open;
     ABSTable1.TableName:='Cat';
   ABSTable1.Filtered:=False;
   ABSTable1.first;
   if ABSTable1.isEmpty then
            begin
              ShowMessage('There is nothing to list');
              Exit
            end;
      DataSource1.DataSet:=ABSQuery1;
   with ABSQuery1 do                                   //inserire il modulo TABSQuery
   begin                                               // cambiare in frsDBDataset1 il DataSet in ABSQuery1
      Close;                                           //scrivere queste righe di codice
      SQL.Text:='select * from Cat ORDER BY Location ASC';
      ExecSQL;
      Open;
   end;
  trova:=False;
  frxReport1.ShowReport;
  Button3.click;
end;

procedure TForm1.Button5Click(Sender: TObject);     //Done
begin
      if MessageDlg('Do you want to quit? ',mtConfirmation, mbYesNo,0)=mrYes then
    begin
       ABSTable1.ReadOnly:=False;
       ABSDatabase1.Readonly:=False;
       ABSQuery1.Close;
       ABSTable1.close;
       ABSDatabase1.Close;
       application.Terminate;
    end else Exit;
end;

procedure TForm1.Button6Click(Sender: TObject);    //Empty DB
begin
   if MessageDlg('Attention ! You are going to erase all data.'+#13+'   DO YOU CONFIRM ?',mtConfirmation,mbYesNo,0)=mrYes then
       begin
        ABSTable1.Close;
        ABSTable1.EmptyTable;
        Button3.Click;
       end  else Exit;

   end;



  procedure TForm1.Button7Click(Sender: TObject);  //edit
     var
     S:array[1..100]of string;
     i:Integer;
     filtro:string;
 begin
  // ABSTable1.disablecontrols;
      if (trova=False) AND (DBGrid1.SelectedRows.Count=0) then
      begin
        ShowMessage('Must use "Find" before you can Edit !' );
        Exit;
      end else
    begin
      with ABSTable1 do
      begin
        //disablecontrols;
         Filter:='';
         filtro:='';
         Filtered:=False;
         if DBGrid1.DataSource.DataSet.IsEmpty then
         begin
           ShowMessage('There is nothing to edit !');
           Exit;
         end ;
        If DBGrid1.Selectedrows.count=0 then  //porre nelle option di dbgrid   dgmultiselect=true
          begin
           ShowMessage('Please click on the record to be edited.'+#13+
           'Use the Database Navigator to browse edit and save' );
           Exit ;
          end else scelto:=True;

        if scelto=True then
        ShowMessage('Please use the Database Navigator to browse edit and save' );
         begin
             for i := 1 to dato do
             begin
               S[i]:='Num='+IntToStr(N[i]);
               if i=1 then
               Filtro:=S[i]else
               Filtro:=Filtro +' '+'OR'+' '+S[i];
             end;
          FilterOptions := FilterOptions + [foCaseInsensitive];
          Filter:=filtro;
          Filtered := True;
          DBGrid1.DataSource.DataSet:=ABSTable1;
         end;
          scelto:=False;
          trova:=False;
       //   EnableControls;
      end;
   end;
  end;

procedure TForm1.Button8Click(Sender: TObject);    //move
 begin
     ABSTable1.Filtered:=False;
    ABSTable1.first;      //per refresh
    if ABSTable1.isEmpty then
    begin
       ShowMessage('There is nothing to move');
        Exit;
    end;
    Form1.FormStyle:=fsNormal;  //altrimenti la InputBox non è visibile se fsStayOnTop
      if MessageDlg('Confirm you want to move all books'+#13+'from their current shelf (to be specified)',mtConfirmation,mbYesNo,0)= mrNo then
        Exit else  showmessage('You have confirmed to move a shelf of your library.');
        begin
          form2.visible :=True;
        end;
  end;

procedure TForm1.CheckBox1Click(Sender: TObject);     //cancella la locazione se unclicked
begin
     if CheckBox1.checked=False then
     begin
        Edit3.Text:='';
        Edit4.Text:='';
     end else Exit;
end;

procedure TForm1.DBGrid1CellClick(Column: TColumn);        //caso shelf find
 begin
    if shelf=True   then
    begin
       k:= Dbgrid1.Datasource.Dataset.FieldByName('Num').AsInteger ;
       scelto:=True;
      // ShowMessage(IntToStr(k));
       shelf:=False;
    end else Exit;
end;

procedure TForm1.DBNavigator1Click(Sender: TObject; Button: TNavigateBtn);
begin
 if Button=nbPost then
  begin
   ShowMessage ('Field has been changed.');
   Button3Click(Self)
  end else Exit
  ;
end;

function GetAppVersionStr: string;     //routine per la versione
       var
       Exe: string;
       Size, Handle: DWORD;
       Buffer: TBytes;
       FixedPtr: PVSFixedFileInfo;
    begin
      Exe := ParamStr(0);
      Size := GetFileVersionInfoSize(PChar(Exe), Handle);
      if Size = 0 then
      RaiseLastOSError;
      SetLength(Buffer, Size);
      if not GetFileVersionInfo(PChar(Exe), Handle, Size, Buffer) then
      RaiseLastOSError;
      if not VerQueryValue(Buffer, '\', Pointer(FixedPtr), Size) then
      RaiseLastOSError;
      Result := Format('%d.%d.%d.%d',
      [LongRec(FixedPtr.dwFileVersionMS).Hi, //major
      LongRec(FixedPtr.dwFileVersionMS).Lo, //minor
      LongRec(FixedPtr.dwFileVersionLS).Hi, //release
      LongRec(FixedPtr.dwFileVersionLS).Lo]); //build
      versione:= Result+'                      Help :F1' ;
    end;
  end.
